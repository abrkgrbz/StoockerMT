// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoockerMT.Persistence.Contexts;

#nullable disable

namespace StoockerMT.Persistence.Migrations.MasterDb
{
    [DbContext(typeof(MasterDbContext))]
    [Migration("20250705134718_InitialMasterDbWithValueObjects")]
    partial class InitialMasterDbWithValueObjects
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Dependencies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("1.0.0");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Modules_Code");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 1,
                            Code = "CRM",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Complete CRM solution for managing customers, leads, and sales",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Customer Relationship Management",
                            Version = "1.0.0"
                        },
                        new
                        {
                            Id = 2,
                            Category = 2,
                            Code = "INV",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Inventory and warehouse management system",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Inventory Management",
                            Version = "1.0.0"
                        },
                        new
                        {
                            Id = 3,
                            Category = 3,
                            Code = "ACC",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Financial accounting and reporting system",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Accounting",
                            Version = "1.0.0"
                        },
                        new
                        {
                            Id = 4,
                            Category = 4,
                            Code = "HR",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Employee management and HR processes",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Human Resources",
                            Version = "1.0.0"
                        });
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.ModuleFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId", "Code")
                        .IsUnique()
                        .HasDatabaseName("IX_ModuleFeatures_ModuleId_Code");

                    b.ToTable("ModuleFeatures", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CRM_LEADS",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Manage leads and opportunities",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 1,
                            Name = "Lead Management"
                        },
                        new
                        {
                            Id = 2,
                            Code = "CRM_CONTACTS",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Manage customer contacts",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 1,
                            Name = "Contact Management"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CRM_PIPELINE",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Visual sales pipeline management",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 1,
                            Name = "Sales Pipeline"
                        },
                        new
                        {
                            Id = 4,
                            Code = "INV_STOCK",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Real-time stock tracking",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 2,
                            Name = "Stock Tracking"
                        },
                        new
                        {
                            Id = 5,
                            Code = "INV_BARCODE",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Barcode scanning support",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 2,
                            Name = "Barcode Scanning"
                        },
                        new
                        {
                            Id = 6,
                            Code = "INV_REORDER",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Automatic reorder points",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 2,
                            Name = "Reorder Management"
                        },
                        new
                        {
                            Id = 7,
                            Code = "ACC_GL",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "General ledger management",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 3,
                            Name = "General Ledger"
                        },
                        new
                        {
                            Id = 8,
                            Code = "ACC_REPORTS",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Financial reporting suite",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 3,
                            Name = "Financial Reports"
                        },
                        new
                        {
                            Id = 9,
                            Code = "ACC_TAX",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tax calculation and reporting",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 3,
                            Name = "Tax Management"
                        },
                        new
                        {
                            Id = 10,
                            Code = "HR_LEAVE",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Employee leave management",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 4,
                            Name = "Leave Management"
                        },
                        new
                        {
                            Id = 11,
                            Code = "HR_TIMESHEET",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Employee timesheet tracking",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 4,
                            Name = "Timesheet"
                        },
                        new
                        {
                            Id = 12,
                            Code = "HR_PAYROLL",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Payroll processing",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModuleId = 4,
                            Name = "Payroll"
                        });
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.ModulePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId", "Code")
                        .IsUnique()
                        .HasDatabaseName("IX_ModulePermissions_ModuleId_Code");

                    b.ToTable("ModulePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CRM_VIEW_CUSTOMERS",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 1,
                            Name = "View Customers",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "CRM_MANAGE_CUSTOMERS",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 1,
                            Name = "Manage Customers",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "CRM_DELETE_CUSTOMERS",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 1,
                            Name = "Delete Customers",
                            Type = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = "CRM_ADMIN",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 1,
                            Name = "CRM Admin",
                            Type = 4
                        },
                        new
                        {
                            Id = 5,
                            Code = "INV_VIEW_PRODUCTS",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 2,
                            Name = "View Products",
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            Code = "INV_MANAGE_PRODUCTS",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 2,
                            Name = "Manage Products",
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            Code = "INV_MANAGE_INVENTORY",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 2,
                            Name = "Manage Inventory",
                            Type = 2
                        },
                        new
                        {
                            Id = 8,
                            Code = "INV_ADMIN",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 2,
                            Name = "Inventory Admin",
                            Type = 4
                        },
                        new
                        {
                            Id = 9,
                            Code = "ACC_VIEW_ACCOUNTS",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 3,
                            Name = "View Accounts",
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            Code = "ACC_MANAGE_ACCOUNTS",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 3,
                            Name = "Manage Accounts",
                            Type = 2
                        },
                        new
                        {
                            Id = 11,
                            Code = "ACC_VIEW_REPORTS",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 3,
                            Name = "View Reports",
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            Code = "ACC_ADMIN",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 3,
                            Name = "Accounting Admin",
                            Type = 4
                        },
                        new
                        {
                            Id = 13,
                            Code = "HR_VIEW_EMPLOYEES",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 4,
                            Name = "View Employees",
                            Type = 1
                        },
                        new
                        {
                            Id = 14,
                            Code = "HR_MANAGE_EMPLOYEES",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 4,
                            Name = "Manage Employees",
                            Type = 2
                        },
                        new
                        {
                            Id = 15,
                            Code = "HR_MANAGE_PAYROLL",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 4,
                            Name = "Manage Payroll",
                            Type = 2
                        },
                        new
                        {
                            Id = 16,
                            Code = "HR_ADMIN",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModuleId = 4,
                            Name = "HR Admin",
                            Type = 4
                        });
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MaxStorageBytes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1073741824L);

                    b.Property<int>("MaxUsers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("IX_TenantInvoices_DueDate");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("IX_TenantInvoices_TenantStatus");

                    b.ToTable("TenantInvoices", (string)null);
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantInvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ModuleId");

                    b.ToTable("TenantInvoiceItems", (string)null);
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantModuleSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoRenew")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TenantId", "ModuleId")
                        .HasDatabaseName("IX_TenantModuleSubscriptions_TenantId_ModuleId");

                    b.ToTable("TenantModuleSubscriptions", (string)null);
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantModuleUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MetaData")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UsageDate")
                        .HasDatabaseName("IX_TenantModuleUsages_UsageDate");

                    b.HasIndex("SubscriptionId", "UsageDate")
                        .HasDatabaseName("IX_TenantModuleUsages_Subscription_Date");

                    b.ToTable("TenantModuleUsages", (string)null);
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTenantAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantUsers", (string)null);
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantUserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GrantedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("GrantedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("TenantUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("TenantUserId", "PermissionId")
                        .IsUnique()
                        .HasDatabaseName("IX_TenantUserPermissions_User_Permission");

                    b.ToTable("TenantUserPermissions", (string)null);
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.Module", b =>
                {
                    b.OwnsOne("StoockerMT.Domain.ValueObjects.Money", "MonthlyPrice", b1 =>
                        {
                            b1.Property<int>("ModuleId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("MonthlyPrice");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("MonthlyCurrency");

                            b1.HasKey("ModuleId");

                            b1.ToTable("Modules");

                            b1.WithOwner()
                                .HasForeignKey("ModuleId");

                            b1.HasData(
                                new
                                {
                                    ModuleId = 1,
                                    Amount = 99.99m,
                                    Currency = "USD"
                                },
                                new
                                {
                                    ModuleId = 2,
                                    Amount = 149.99m,
                                    Currency = "USD"
                                },
                                new
                                {
                                    ModuleId = 3,
                                    Amount = 199.99m,
                                    Currency = "USD"
                                },
                                new
                                {
                                    ModuleId = 4,
                                    Amount = 129.99m,
                                    Currency = "USD"
                                });
                        });

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.Money", "YearlyPrice", b1 =>
                        {
                            b1.Property<int>("ModuleId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("YearlyPrice");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("YearlyCurrency");

                            b1.HasKey("ModuleId");

                            b1.ToTable("Modules");

                            b1.WithOwner()
                                .HasForeignKey("ModuleId");

                            b1.HasData(
                                new
                                {
                                    ModuleId = 1,
                                    Amount = 999.99m,
                                    Currency = "USD"
                                },
                                new
                                {
                                    ModuleId = 2,
                                    Amount = 1499.99m,
                                    Currency = "USD"
                                },
                                new
                                {
                                    ModuleId = 3,
                                    Amount = 1999.99m,
                                    Currency = "USD"
                                },
                                new
                                {
                                    ModuleId = 4,
                                    Amount = 1299.99m,
                                    Currency = "USD"
                                });
                        });

                    b.Navigation("MonthlyPrice")
                        .IsRequired();

                    b.Navigation("YearlyPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.ModuleFeature", b =>
                {
                    b.HasOne("StoockerMT.Domain.Entities.MasterDb.Module", "Module")
                        .WithMany("Features")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.ModulePermission", b =>
                {
                    b.HasOne("StoockerMT.Domain.Entities.MasterDb.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.Tenant", b =>
                {
                    b.OwnsOne("StoockerMT.Domain.ValueObjects.TenantCode", "Code", b1 =>
                        {
                            b1.Property<int>("TenantId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Code");

                            b1.HasKey("TenantId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Tenants_Code");

                            b1.ToTable("Tenants");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.Navigation("Code")
                        .IsRequired();
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantInvoice", b =>
                {
                    b.HasOne("StoockerMT.Domain.Entities.MasterDb.Tenant", "Tenant")
                        .WithMany("Invoices")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.DateRange", "BillingPeriod", b1 =>
                        {
                            b1.Property<int>("TenantInvoiceId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("BillingEndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("BillingStartDate");

                            b1.HasKey("TenantInvoiceId");

                            b1.ToTable("TenantInvoices");

                            b1.WithOwner()
                                .HasForeignKey("TenantInvoiceId");
                        });

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.Money", "SubTotal", b1 =>
                        {
                            b1.Property<int>("TenantInvoiceId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SubTotal");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("SubTotalCurrency");

                            b1.HasKey("TenantInvoiceId");

                            b1.ToTable("TenantInvoices");

                            b1.WithOwner()
                                .HasForeignKey("TenantInvoiceId");
                        });

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.Money", "TaxAmount", b1 =>
                        {
                            b1.Property<int>("TenantInvoiceId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TaxAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("TaxCurrency");

                            b1.HasKey("TenantInvoiceId");

                            b1.ToTable("TenantInvoices");

                            b1.WithOwner()
                                .HasForeignKey("TenantInvoiceId");
                        });

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.Money", "Total", b1 =>
                        {
                            b1.Property<int>("TenantInvoiceId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Total");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("TotalCurrency");

                            b1.HasKey("TenantInvoiceId");

                            b1.ToTable("TenantInvoices");

                            b1.WithOwner()
                                .HasForeignKey("TenantInvoiceId");
                        });

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.InvoiceNumber", "InvoiceNumber", b1 =>
                        {
                            b1.Property<int>("TenantInvoiceId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("InvoiceNumber");

                            b1.HasKey("TenantInvoiceId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_TenantInvoices_InvoiceNumber");

                            b1.ToTable("TenantInvoices");

                            b1.WithOwner()
                                .HasForeignKey("TenantInvoiceId");
                        });

                    b.Navigation("BillingPeriod")
                        .IsRequired();

                    b.Navigation("InvoiceNumber")
                        .IsRequired();

                    b.Navigation("SubTotal")
                        .IsRequired();

                    b.Navigation("TaxAmount")
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("Total")
                        .IsRequired();
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantInvoiceItem", b =>
                {
                    b.HasOne("StoockerMT.Domain.Entities.MasterDb.TenantInvoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoockerMT.Domain.Entities.MasterDb.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.Money", "Total", b1 =>
                        {
                            b1.Property<int>("TenantInvoiceItemId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Total");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("TotalCurrency");

                            b1.HasKey("TenantInvoiceItemId");

                            b1.ToTable("TenantInvoiceItems");

                            b1.WithOwner()
                                .HasForeignKey("TenantInvoiceItemId");
                        });

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<int>("TenantInvoiceItemId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitPrice");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("Currency");

                            b1.HasKey("TenantInvoiceItemId");

                            b1.ToTable("TenantInvoiceItems");

                            b1.WithOwner()
                                .HasForeignKey("TenantInvoiceItemId");
                        });

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<int>("TenantInvoiceItemId")
                                .HasColumnType("int");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasDefaultValue("PCS")
                                .HasColumnName("Unit");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,3)")
                                .HasColumnName("Quantity");

                            b1.HasKey("TenantInvoiceItemId");

                            b1.ToTable("TenantInvoiceItems");

                            b1.WithOwner()
                                .HasForeignKey("TenantInvoiceItemId");
                        });

                    b.Navigation("Invoice");

                    b.Navigation("Module");

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("Total")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantModuleSubscription", b =>
                {
                    b.HasOne("StoockerMT.Domain.Entities.MasterDb.Module", "Module")
                        .WithMany("TenantSubscriptions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoockerMT.Domain.Entities.MasterDb.Tenant", "Tenant")
                        .WithMany("ModuleSubscriptions")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<int>("TenantModuleSubscriptionId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("Currency");

                            b1.HasKey("TenantModuleSubscriptionId");

                            b1.ToTable("TenantModuleSubscriptions");

                            b1.WithOwner()
                                .HasForeignKey("TenantModuleSubscriptionId");
                        });

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.Money", "DiscountAmount", b1 =>
                        {
                            b1.Property<int>("TenantModuleSubscriptionId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("DiscountAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("DiscountCurrency");

                            b1.HasKey("TenantModuleSubscriptionId");

                            b1.ToTable("TenantModuleSubscriptions");

                            b1.WithOwner()
                                .HasForeignKey("TenantModuleSubscriptionId");
                        });

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.DateRange", "SubscriptionPeriod", b1 =>
                        {
                            b1.Property<int>("TenantModuleSubscriptionId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("SubscriptionEndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("SubscriptionStartDate");

                            b1.HasKey("TenantModuleSubscriptionId");

                            b1.HasIndex("EndDate")
                                .HasDatabaseName("IX_TenantModuleSubscriptions_SubscriptionEndDate");

                            b1.ToTable("TenantModuleSubscriptions");

                            b1.WithOwner()
                                .HasForeignKey("TenantModuleSubscriptionId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("DiscountAmount");

                    b.Navigation("Module");

                    b.Navigation("SubscriptionPeriod")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantModuleUsage", b =>
                {
                    b.HasOne("StoockerMT.Domain.Entities.MasterDb.TenantModuleSubscription", "Subscription")
                        .WithMany("UsageRecords")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantUser", b =>
                {
                    b.HasOne("StoockerMT.Domain.Entities.MasterDb.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("TenantUserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Email");

                            b1.HasKey("TenantUserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_TenantUsers_Email");

                            b1.ToTable("TenantUsers");

                            b1.WithOwner()
                                .HasForeignKey("TenantUserId");
                        });

                    b.OwnsOne("StoockerMT.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<int>("TenantUserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("TenantUserId");

                            b1.ToTable("TenantUsers");

                            b1.WithOwner()
                                .HasForeignKey("TenantUserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("PhoneNumber");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantUserPermission", b =>
                {
                    b.HasOne("StoockerMT.Domain.Entities.MasterDb.ModulePermission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoockerMT.Domain.Entities.MasterDb.TenantUser", "TenantUser")
                        .WithMany("Permissions")
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.Module", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Permissions");

                    b.Navigation("TenantSubscriptions");
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.ModulePermission", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.Tenant", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("ModuleSubscriptions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantInvoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantModuleSubscription", b =>
                {
                    b.Navigation("UsageRecords");
                });

            modelBuilder.Entity("StoockerMT.Domain.Entities.MasterDb.TenantUser", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
